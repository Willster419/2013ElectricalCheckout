// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::climberSpeedController1 = NULL;
SpeedController* RobotMap::climberSpeedController2 = NULL;
CANJaguar* RobotMap::climberLeftCIM = NULL;
CANJaguar* RobotMap::climberRightCIM = NULL;
CANJaguar* RobotMap::driveTrainCANJaguar1 = NULL;
CANJaguar* RobotMap::driveTrainCANJaguar2 = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
Encoder* RobotMap::driveTrainQuadratureEncoder1 = NULL;
Encoder* RobotMap::driveTrainQuadratureEncoder2 = NULL;
SpeedController* RobotMap::collectorCollectorMotor = NULL;
AnalogChannel* RobotMap::collectorHowManyDisks = NULL;
DigitalInput* RobotMap::collectorDiskOnTheBed = NULL;
AnalogChannel* RobotMap::collectorUpsideDown = NULL;
CANJaguar* RobotMap::shootermainShooter = NULL;
CANJaguar* RobotMap::shootersupportShooter = NULL;
Encoder* RobotMap::shooterShooterCounter1 = NULL;
CANJaguar* RobotMap::shooterAngleElevationJag = NULL;
DigitalInput* RobotMap::shooterLightSensor = NULL;
Encoder* RobotMap::shooterShooterCounter2 = NULL;
Gyro* RobotMap::angleCheckWithGyroGyro1 = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	climberSpeedController1 = new Victor(1, 1);
	lw->AddActuator("Climber", "Speed Controller 1", (Victor*) climberSpeedController1);
	
	climberSpeedController2 = new Victor(1, 2);
	lw->AddActuator("Climber", "Speed Controller 2", (Victor*) climberSpeedController2);
	
	climberLeftCIM = new CANJaguar(2);
	
	
	climberRightCIM = new CANJaguar(3);
	
	
	driveTrainCANJaguar1 = new CANJaguar(6);
	
	
	driveTrainCANJaguar2 = new CANJaguar(9);
	
	
	driveTrainRobotDrive = new RobotDrive(driveTrainCANJaguar1, driveTrainCANJaguar2);
	
	driveTrainRobotDrive->SetSafetyEnabled(false);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);
        
	driveTrainQuadratureEncoder1 = new Encoder(1, 5, 1, 6, false, Encoder::k4X);
	lw->AddSensor("Drive Train", "Quadrature Encoder 1", driveTrainQuadratureEncoder1);
	driveTrainQuadratureEncoder1->SetDistancePerPulse(1.0);
        driveTrainQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
        driveTrainQuadratureEncoder1->Start();
	driveTrainQuadratureEncoder2 = new Encoder(1, 7, 1, 8, false, Encoder::k4X);
	lw->AddSensor("Drive Train", "Quadrature Encoder 2", driveTrainQuadratureEncoder2);
	driveTrainQuadratureEncoder2->SetDistancePerPulse(1.0);
        driveTrainQuadratureEncoder2->SetPIDSourceParameter(Encoder::kRate);
        driveTrainQuadratureEncoder2->Start();
	collectorCollectorMotor = new Victor(1, 3);
	lw->AddActuator("Collector", "CollectorMotor", (Victor*) collectorCollectorMotor);
	
	collectorHowManyDisks = new AnalogChannel(1, 2);
	lw->AddSensor("Collector", "HowManyDisks", collectorHowManyDisks);
	
	collectorDiskOnTheBed = new DigitalInput(1, 3);
	lw->AddSensor("Collector", "DiskOnTheBed", collectorDiskOnTheBed);
	
	collectorUpsideDown = new AnalogChannel(1, 3);
	lw->AddSensor("Collector", "UpsideDown", collectorUpsideDown);
	
	shootermainShooter = new CANJaguar(5);
	
	
	shootersupportShooter = new CANJaguar(7);
	
	
	shooterShooterCounter1 = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Shooter", "ShooterCounter1", shooterShooterCounter1);
	shooterShooterCounter1->SetDistancePerPulse(1.0);
        shooterShooterCounter1->SetPIDSourceParameter(Encoder::kRate);
        shooterShooterCounter1->Start();
	shooterAngleElevationJag = new CANJaguar(4);
	
	
	shooterLightSensor = new DigitalInput(1, 4);
	lw->AddSensor("Shooter", "LightSensor", shooterLightSensor);
	
	shooterShooterCounter2 = new Encoder(1, 9, 1, 10, false, Encoder::k4X);
	lw->AddSensor("Shooter", "ShooterCounter2", shooterShooterCounter2);
	shooterShooterCounter2->SetDistancePerPulse(1.0);
        shooterShooterCounter2->SetPIDSourceParameter(Encoder::kRate);
        shooterShooterCounter2->Start();
	angleCheckWithGyroGyro1 = new Gyro(1, 1);
	lw->AddSensor("AngleCheckWithGyro", "Gyro 1", angleCheckWithGyroGyro1);
	angleCheckWithGyroGyro1->SetSensitivity(0.007);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
