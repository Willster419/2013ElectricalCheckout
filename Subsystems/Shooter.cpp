// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
double P;
double I;
double D;
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	mainShooter = RobotMap::shootermainShooter;
	supportShooter = RobotMap::shootersupportShooter;
	angleElevationJag = RobotMap::shooterAngleElevationJag;
	lightSensor = RobotMap::shooterLightSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	WilliesSpeed = 0.00;
	WilliesSpeed3 = 0.00;
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	mainShooter->ChangeControlMode(CANJaguar::kSpeed);
	mainShooter->SetSpeedReference(CANJaguar::kSpeedRef_QuadEncoder);
	mainShooter->EnableControl();
	supportShooter->ChangeControlMode(CANJaguar::kSpeed);
	supportShooter->SetSpeedReference(CANJaguar::kSpeedRef_QuadEncoder);
	supportShooter->EnableControl();
	printf ("the configuration for SHOOTAH is complete\n");
	RobotMap::shootermainShooter->Set(WilliesSpeed);
	RobotMap::shootersupportShooter->Set(WilliesSpeed);
	printf ("speeding at... %f\n", WilliesSpeed);
	printf ("angeling at... %f\n", WilliesSpeed3);
	RobotMap::shooterAngleElevationJag->Set(WilliesSpeed3);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
/*void Shooter::ShootTheDisk() {
	
	//Robot::shooter->ShootTheDisk();
	RobotMap::shootermainShooter->Set(WilliesSpeed);
}
*/
void Shooter::SetSpeed(float inSpeed)
{
	WilliesSpeed = inSpeed;
	WilliesSpeed3 = inSpeed;
	mainShooter->Set( WilliesSpeed );
	supportShooter->Set( WilliesSpeed );
	angleElevationJag->Set( WilliesSpeed3 );
}
float Shooter::GetSpeed()
{
	return (WilliesSpeed);
}
void Shooter::ReportSpeed()
{
	double encoderSpeed1 = mainShooter->GetPosition();
	double encoderSpeed2 = supportShooter->GetPosition();
	int lightInfo = lightSensor->Get();
	SmartDashboard::PutNumber("shooter encoder 1", (double) encoderSpeed1);
	SmartDashboard::PutNumber("shooter encoder 2", (double) encoderSpeed2);
	SmartDashboard::PutNumber("light is", lightInfo);
}

void Shooter::SetPID(double P, double I, double D){
	P = 00.04;
	I = 0.004;
	D = 0.000;
	printf("Setting P:\t%f\nI:\t%f\nD:\t%f\n", P, I, D);
	mainShooter->SetPID(P, I, D);
	supportShooter->SetPID(P, I, D);
}
