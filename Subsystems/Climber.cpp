// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Robotmap.h"
#include "../Commands/ClimberSensors.h"
Climber::Climber() : Subsystem("Climber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedController1 = RobotMap::climberSpeedController1;
	speedController2 = RobotMap::climberSpeedController2;
	leftCIM = RobotMap::climberLeftCIM;
	rightCIM = RobotMap::climberRightCIM;
	magneticEncoder1 = RobotMap::climberMagneticEncoder1;
	magneticencoder2 = RobotMap::climberMagneticencoder2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	climberSpeed = 0.00;
	wtf = 0.00;
}
    
void Climber::InitDefaultCommand() {
	leftCIM->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	leftCIM->ConfigEncoderCodesPerRev(360);
	leftCIM->EnableControl();
	rightCIM->SetPositionReference(CANJaguar::kPosRef_QuadEncoder);
	rightCIM->ConfigEncoderCodesPerRev(360);
	rightCIM->EnableControl();
		printf ("the configuration for CLIMBAH iz complete\n");
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	RobotMap::climberLeftCIM->Set(climberSpeed);
	RobotMap::climberRightCIM->Set(climberSpeed);
	printf ("climbing at... %f\n", climberSpeed);
	printf ("latestbuild\n");
	SetDefaultCommand(new ClimberSensors());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Climber::SetSpeed(float inSpeed2)
{
	climberSpeed = inSpeed2;
	//climberSpeed = i
	leftCIM->Set(climberSpeed);
	rightCIM->Set(climberSpeed *-1);
	//printf ("lol\n");
}
float Climber::GetSpeed()
{
	return (climberSpeed);
}
void Climber::GetStuff()
{
	float MagneticValue1 = magneticEncoder1->GetVoltage();
	float whoops = magneticencoder2->GetVoltage();
	float leftCIMSpeed = leftCIM->GetPosition();
	float rightCIMSpeed = rightCIM->GetPosition();
	float CIMVoltsLeft = leftCIM->GetOutputVoltage();
	float CIMVoltsRight = rightCIM->GetOutputVoltage();	
	float armVoltsLeft = speedController1->Get();
	float armVoltsRight = speedController2->Get();
	SmartDashboard::PutNumber("magnetic encoder 1", (double) MagneticValue1);
	SmartDashboard::PutNumber("magnetic encoder 2", (double) whoops);
	SmartDashboard::PutNumber("left cim encoder", (double)leftCIMSpeed);
	SmartDashboard::PutNumber("right cim encoder", (double)rightCIMSpeed);
	SmartDashboard::PutNumber("climber speed", (double)climberSpeed);
	SmartDashboard::PutNumber("arm speed", (double)wtf);
	SmartDashboard::PutNumber("cim volts left", (double)CIMVoltsLeft);
	SmartDashboard::PutNumber("cim volts right", (double)CIMVoltsRight);
	SmartDashboard::PutNumber("arm volts left", (double)armVoltsLeft);
	SmartDashboard::PutNumber("arm volts left", (double)armVoltsRight);
	
}
void Climber::SetArms(float inspeed3)
{
	wtf = inspeed3;
   	speedController1->Set(wtf);
	speedController2->Set(wtf);
}
float Climber::GetArms()
{
	return (wtf);
}
